{"version":3,"file":"/packages/bootboxjs.js","sources":["bootboxjs/lib/bootbox.js"],"names":[],"mappings":";;;;;;;;AAAA,G;AACA,qB;AACA,E;AACA,mC;AACA,G;AACA,wD;AACA,iE;AACA,e;;AAEA,oD;AACA,mB;AACA,W;AACA,iE;AACA,sC;AACA,yC;AACA,8E;AACA,oB;AACA,kB;AACA,e;AACA,W;AACA,oC;AACA,yC;AACA,e;AACA,W;AACA,yC;AACA,gB;AACA,kF;AACA,S;AACA,2C;AACA,a;AACA,W;AACA,iF;AACA,K;AACA,I;;AAEA,qD;AACA,2B;;AAEA,kB;AACA,uB;AACA,iB;AACA,2B;AACA,mB;AACA,+B;AACA,kB;AACA,8D;AACA,oB;AACA,+C;AACA,sB;AACA,6C;AACA,c;AACA,I;;AAEA,uD;AACA,mB;;AAEA,K;AACA,a;AACA,K;AACA,oB;AACA,0C;AACA,kD;AACA,G;;AAEA,iD;AACA,uB;;AAEA,kE;AACA,4D;;AAEA,2E;AACA,yD;AACA,yE;;AAEA,iC;AACA,0B;AACA,2B;AACA,K;AACA,G;;AAEA,8B;AACA,yD;AACA,iB;AACA,oB;AACA,W;AACA,K;AACA,a;AACA,G;;AAEA,uC;AACA,kB;AACA,6C;AACA,oC;AACA,O;AACA,G;;AAEA,8B;AACA,gB;AACA,c;;;AAGA,sC;AACA,4D;AACA,K;;AAEA,2B;AACA,kD;AACA,K;;AAEA,mE;AACA,8C;;AAEA,2B;AACA,2B;AACA,K;;AAEA,mE;AACA,sE;AACA,qC;AACA,2D;;AAEA,8B;;AAEA,kC;;AAEA,gD;;AAEA,iC;AACA,iE;AACA,sE;AACA,iC;AACA,0B;AACA,U;AACA,O;;AAEA,8E;AACA,wC;AACA,yE;AACA,O;;AAEA,0B;AACA,kF;AACA,2B;AACA,O;;AAEA,8B;AACA,8C;AACA,2E;AACA,2C;AACA,gB;AACA,2C;AACA,S;AACA,O;AACA,O;;AAEA,mB;AACA,G;;AAEA,2C;AACA,2B;AACA,qB;;AAEA,+B;AACA,iD;AACA,K;;AAEA,oD;AACA,uC;AACA,uC;AACA,Y;AACA,wB;AACA,K;;AAEA,mB;AACA,G;;AAEA,uD;AACA,wE;AACA,G;;AAEA,mD;AACA,2B;AACA,0E;AACA,Y;AACA,M;AACA,G;;AAEA,2B;AACA,qB;;AAEA,uD;AACA,kC;AACA,uC;AACA,yC;;AAEA,sB;AACA,wB;AACA,Q;AACA,K;;AAEA,mB;AACA,G;;AAEA,4B;AACA,Y;AACA,kD;AACA,M;AACA,G;;AAEA,8C;AACA,4B;AACA,wC;AACA,mC;AACA,O;;AAEA,yC;AACA,8C;AACA,0G;AACA,O;AACA,O;;AAEA,mB;AACA,G;;AAEA,8B;AACA,gB;;AAEA,uE;;AAEA,8D;AACA,yF;AACA,K;;AAEA,O;AACA,gB;AACA,O;AACA,iE;AACA,2C;AACA,kC;AACA,O;AACA,kB;AACA,M;;AAEA,mC;AACA,I;;AAEA,gC;AACA,gB;;AAEA,sF;;AAEA,O;AACA,yE;AACA,O;AACA,qE;AACA,qC;AACA,M;;AAEA,mD;AACA,oC;AACA,M;;AAEA,kC;AACA,0C;AACA,qD;AACA,K;;AAEA,mC;AACA,I;;AAEA,+B;AACA,gB;AACA,iB;AACA,e;AACA,a;AACA,c;AACA,mB;;AAEA,iD;AACA,yD;AACA,wD;AACA,+B;AACA,6B;;AAEA,gB;AACA,iD;AACA,e;AACA,M;;AAEA,8B;AACA,iE;AACA,2B;AACA,M;;AAEA,wE;AACA,yE;AACA,0E;AACA,oE;;AAEA,O;AACA,yE;AACA,O;AACA,2B;;AAEA,qE;AACA,oC;AACA,M;;AAEA,mD;AACA,2C;AACA,M;;AAEA,yB;;AAEA,iC;AACA,yB;AACA,iD;AACA,K;;AAEA,0C;AACA,oD;AACA,K;;AAEA,uB;AACA,qC;AACA,6B;;AAEA,+B;AACA,uB;;AAEA,mC;AACA,yB;AACA,iE;AACA,gD;AACA,0C;AACA,O;;AAEA,qC;;AAEA,+D;AACA,iC;;AAEA,iE;AACA,4C;AACA,oB;AACA,O;;AAEA,8B;AACA,2B;AACA,K;;AAEA,kB;AACA,I;;AAEA,sC;AACA,gC;;AAEA,qC;AACA,0C;AACA,kC;AACA,uB;AACA,qB;AACA,gC;AACA,M;;AAEA,yC;;AAEA,uF;AACA,qF;AACA,uC;AACA,4I;AACA,uC;AACA,O;;AAEA,qD;;AAEA,mC;AACA,8B;AACA,K;;AAEA,4B;AACA,yC;AACA,K;;AAEA,wB;AACA,oC;AACA,K;;AAEA,8B;AACA,iD;;AAEA,0B;AACA,0D;AACA,c;AACA,+D;AACA,O;AACA,K;;AAEA,wB;AACA,sD;AACA,K;;AAEA,2B;AACA,mC;AACA,mD;AACA,K;;;AAGA,O;AACA,mD;AACA,qD;AACA,0C;AACA,O;;AAEA,8C;AACA,uE;AACA,uE;AACA,qD;AACA,8B;AACA,wB;AACA,O;AACA,O;;AAEA,M;AACA,2C;AACA,8D;AACA,gE;AACA,iD;AACA,6B;AACA,oE;AACA,O;AACA,O;AACA,M;;AAEA,4C;AACA,gD;AACA,O;;AAEA,O;AACA,6D;AACA,6D;AACA,0B;AACA,O;;AAEA,8C;AACA,+B;AACA,uD;AACA,O;AACA,O;;AAEA,O;AACA,2D;AACA,kC;AACA,O;;AAEA,4D;AACA,mD;;AAEA,yD;;AAEA,O;;AAEA,6D;AACA,6D;AACA,6D;AACA,kD;AACA,qD;AACA,O;;AAEA,oC;AACA,2B;AACA,0C;AACA,O;AACA,O;;AAEA,gE;AACA,iE;AACA,8D;AACA,oB;;AAEA,4B;;AAEA,kB;AACA,iC;AACA,sB;AACA,iB;AACA,O;;AAEA,uB;AACA,2B;AACA,K;;AAEA,4D;AACA,iE;AACA,+D;AACA,0B;;AAEA,K;AACA,6B;AACA,uB;AACA,K;;AAEA,0B;AACA,wB;AACA,uC;AACA,Q;AACA,wB;AACA,uC;AACA,O;AACA,M;AACA,M;;AAEA,kB;;AAEA,I;;AAEA,0C;AACA,+B;AACA,I;;AAEA,gC;AACA,gC;AACA,I;;;AAGA,K;AACA,sG;AACA,gG;AACA,K;AACA,iB;AACA,U;AACA,qB;AACA,2B;AACA,qB;AACA,M;AACA,U;AACA,qB;AACA,2B;AACA,0B;AACA,M;AACA,U;AACA,qB;AACA,4B;AACA,6B;AACA,M;AACA,U;AACA,qB;AACA,yB;AACA,oB;AACA,M;AACA,U;AACA,qB;AACA,2B;AACA,yB;AACA,M;AACA,U;AACA,qB;AACA,0B;AACA,oB;AACA,M;AACA,U;AACA,qB;AACA,0B;AACA,0B;AACA,M;AACA,U;AACA,qB;AACA,0B;AACA,0B;AACA,M;AACA,U;AACA,qB;AACA,4B;AACA,4B;AACA,M;AACA,U;AACA,qB;AACA,yB;AACA,2B;AACA,M;AACA,U;AACA,qB;AACA,yB;AACA,2B;AACA,M;AACA,a;AACA,qB;AACA,qB;AACA,oB;AACA,M;AACA,a;AACA,qB;AACA,qB;AACA,oB;AACA,K;AACA,I;;AAEA,+B;AACA,mC;AACA,I;;AAEA,iB;;AAEA,kB","sourcesContent":["/**\n * bootbox.js v4.0.0 \n *\n * http://bootboxjs.com/license.txt\n */\n// @see https://github.com/makeusabrew/bootbox/issues/71\nwindow.bootbox = window.bootbox || (function init($, undefined) {\n  \"use strict\";\n\n  // the base DOM structure needed to create a modal\n  var templates = {\n    dialog:\n      \"<div class='bootbox modal' tabindex='-1' role='dialog'>\" +\n        \"<div class='modal-dialog'>\" +\n          \"<div class='modal-content'>\" +\n            \"<div class='modal-body'><div class='bootbox-body'></div></div>\" +\n          \"</div>\" +\n        \"</div>\" +\n      \"</div>\",\n    header:\n      \"<div class='modal-header'>\" +\n        \"<h4 class='modal-title'></h4>\" +\n      \"</div>\",\n    footer:\n      \"<div class='modal-footer'></div>\",\n    closeButton:\n      \"<button type='button' class='bootbox-close-button close'>&times;</button>\",\n    form:\n      \"<form class='bootbox-form'></form>\",\n    inputs: {\n      text:\n        \"<input class='bootbox-input form-control' autocomplete=off type=text />\"\n    }\n  };\n\n  // cache a reference to the jQueryfied body element\n  var appendTo = $(\"body\");\n\n  var defaults = {\n    // default language\n    locale: \"en\",\n    // show backdrop or not\n    backdrop: true,\n    // animate the modal in/out\n    animate: true,\n    // additional class string applied to the top level dialog\n    className: null,\n    // whether or not to include a close button\n    closeButton: true,\n    // show the dialog immediately by default\n    show: true\n  };\n\n  // our public object; augmented after our private API\n  var exports = {};\n\n  /**\n   * @private\n   */\n  function _t(key) {\n    var locale = locales[defaults.locale];\n    return locale ? locale[key] : locales.en[key];\n  }\n\n  function processCallback(e, dialog, callback) {\n    e.preventDefault();\n\n    // by default we assume a callback will get rid of the dialog,\n    // although it is given the opportunity to override this\n\n    // so, if the callback can be invoked and it *explicitly returns false*\n    // then we'll set a flag to keep the dialog active...\n    var preserveDialog = $.isFunction(callback) && callback(e) === false;\n\n    // ... otherwise we'll bin it\n    if (!preserveDialog) {\n      dialog.modal(\"hide\");\n    }\n  }\n\n  function getKeyLength(obj) {\n    // @TODO defer to Object.keys(x).length if available?\n    var k, t = 0;\n    for (k in obj) {\n      t ++;\n    }\n    return t;\n  }\n\n  function each(collection, iterator) {\n    var index = 0;\n    $.each(collection, function(key, value) {\n      iterator(key, value, index++);\n    });\n  }\n\n  function sanitize(options) {\n    var buttons;\n    var total;\n\n\n    if (typeof options !== \"object\") {\n      throw new Error(\"Please supply an object of options\");\n    }\n\n    if (!options.message) {\n      throw new Error(\"Please specify a message\");\n    }\n\n    // make sure any supplied options take precedence over defaults\n    options = $.extend({}, defaults, options);\n\n    if (!options.buttons) {\n      options.buttons = {};\n    }\n\n    // we only support Bootstrap's \"static\" and false backdrop args\n    // supporting true would mean you could dismiss the dialog without\n    // explicitly interacting with it\n    options.backdrop = options.backdrop ? \"static\" : false;\n\n    buttons = options.buttons;\n\n    total = getKeyLength(buttons);\n\n    each(buttons, function(key, button, index) {\n\n      if ($.isFunction(button)) {\n        // short form, assume value is our callback. Since button\n        // isn't an object it isn't a reference either so re-assign it\n        button = buttons[key] = {\n          callback: button\n        };\n      }\n\n      // before any further checks make sure by now button is the correct type\n      if ($.type(button) !== \"object\") {\n        throw new Error(\"button with key \" + key + \" must be an object\");\n      }\n\n      if (!button.label) {\n        // the lack of an explicit label means we'll assume the key is good enough\n        button.label = key;\n      }\n\n      if (!button.className) {\n        if (total <= 2 && index === total-1) {\n          // always add a primary to the main option in a two-button dialog\n          button.className = \"btn-primary\";\n        } else {\n          button.className = \"btn-default\";\n        }\n      }\n    });\n\n    return options;\n  }\n\n  function mapArguments(args, properties) {\n    var argn = args.length;\n    var options = {};\n\n    if (argn < 1 || argn > 2) {\n      throw new Error(\"Invalid argument length\");\n    }\n\n    if (argn === 2 || typeof args[0] === \"string\") {\n      options[properties[0]] = args[0];\n      options[properties[1]] = args[1];\n    } else {\n      options = args[0];\n    }\n\n    return options;\n  }\n\n  function mergeArguments(defaults, args, properties) {\n    return $.extend(true, {}, defaults, mapArguments(args, properties));\n  }\n\n  function mergeButtons(labels, args, properties) {\n    return validateButtons(\n      mergeArguments(createButtons.apply(null, labels), args, properties),\n      labels\n    );\n  }\n\n  function createLabels() {\n    var buttons = {};\n\n    for (var i = 0, j = arguments.length; i < j; i++) {\n      var argument = arguments[i];\n      var key = argument.toLowerCase();\n      var value = argument.toUpperCase();\n\n      buttons[key] = {\n        label: _t(value)\n      };\n    }\n\n    return buttons;\n  }\n\n  function createButtons() {\n    return {\n      buttons: createLabels.apply(null, arguments)\n    };\n  }\n\n  function validateButtons(options, buttons) {\n    var allowedButtons = {};\n    each(buttons, function(key, value) {\n      allowedButtons[value] = true;\n    });\n\n    each(options.buttons, function(key) {\n      if (allowedButtons[key] === undefined) {\n        throw new Error(\"button key \" + key + \" is not allowed (options are \" + buttons.join(\"\\n\") + \")\");\n      }\n    });\n\n    return options;\n  }\n\n  exports.alert = function() {\n    var options;\n\n    options = mergeButtons([\"ok\"], arguments, [\"message\", \"callback\"]);\n\n    if (options.callback && !$.isFunction(options.callback)) {\n      throw new Error(\"alert requires callback property to be a function when provided\");\n    }\n\n    /**\n     * overrides\n     */\n    options.buttons.ok.callback = options.onEscape = function() {\n      if ($.isFunction(options.callback)) {\n        return options.callback();\n      }\n      return true;\n    };\n\n    return exports.dialog(options);\n  };\n\n  exports.confirm = function() {\n    var options;\n\n    options = mergeButtons([\"cancel\", \"confirm\"], arguments, [\"message\", \"callback\"]);\n\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n    options.buttons.cancel.callback = options.onEscape = function() {\n      return options.callback(false);\n    };\n\n    options.buttons.confirm.callback = function() {\n      return options.callback(true);\n    };\n\n    // confirm specific validation\n    if (!$.isFunction(options.callback)) {\n      throw new Error(\"confirm requires a callback\");\n    }\n\n    return exports.dialog(options);\n  };\n\n  exports.prompt = function() {\n    var options;\n    var defaults;\n    var dialog;\n    var form;\n    var input;\n    var shouldShow;\n\n    // we have to create our form first otherwise\n    // its value is undefined when gearing up our options\n    // @TODO this could be solved by allowing message to\n    // be a function instead...\n    form = $(templates.form);\n\n    defaults = {\n      buttons: createLabels(\"cancel\", \"confirm\"),\n      value: \"\"\n    };\n\n    options = validateButtons(\n      mergeArguments(defaults, arguments, [\"title\", \"callback\"]),\n      [\"cancel\", \"confirm\"]\n    );\n\n    // capture the user's show value; we always set this to false before\n    // spawning the dialog to give us a chance to attach some handlers to\n    // it, but we need to make sure we respect a preference not to show it\n    shouldShow = (options.show === undefined) ? true : options.show;\n\n    /**\n     * overrides; undo anything the user tried to set they shouldn't have\n     */\n    options.message = form;\n\n    options.buttons.cancel.callback = options.onEscape = function() {\n      return options.callback(null);\n    };\n\n    options.buttons.confirm.callback = function() {\n      return options.callback(input.val());\n    };\n\n    options.show = false;\n\n    // prompt specific validation\n    if (!options.title) {\n      throw new Error(\"prompt requires a title\");\n    }\n\n    if (!$.isFunction(options.callback)) {\n      throw new Error(\"prompt requires a callback\");\n    }\n\n    // create the input\n    input = $(templates.inputs.text);\n    input.val(options.value);\n\n    // now place it in our form\n    form.append(input);\n\n    form.on(\"submit\", function(e) {\n      e.preventDefault();\n      // @TODO can we actually click *the* button object instead?\n      // e.g. buttons.confirm.click() or similar\n      dialog.find(\".btn-primary\").click();\n    });\n\n    dialog = exports.dialog(options);\n\n    // clear the existing handler focusing the submit button...\n    dialog.off(\"shown.bs.modal\");\n\n    // ...and replace it with one focusing our input, if possible\n    dialog.on(\"shown.bs.modal\", function() {\n      input.focus();\n    });\n\n    if (shouldShow === true) {\n      dialog.modal(\"show\");\n    }\n\n    return dialog;\n  };\n\n  exports.dialog = function(options) {\n    options = sanitize(options);\n\n    var dialog = $(templates.dialog);\n    var body = dialog.find(\".modal-body\");\n    var buttons = options.buttons;\n    var buttonStr = \"\";\n    var callbacks = {\n      onEscape: options.onEscape\n    };\n\n    each(buttons, function(key, button) {\n\n      // @TODO I don't like this string appending to itself; bit dirty. Needs reworking\n      // can we just build up button elements instead? slower but neater. Then button\n      // can just become a template too\n      buttonStr += \"<button data-bb-handler='\" + key + \"' type='button' class='btn \" + button.className + \"'>\" + button.label + \"</button>\";\n      callbacks[key] = button.callback;\n    });\n\n    body.find(\".bootbox-body\").html(options.message);\n\n    if (options.animate === true) {\n      dialog.addClass(\"fade\");\n    }\n\n    if (options.className) {\n      dialog.addClass(options.className);\n    }\n\n    if (options.title) {\n      body.before(templates.header);\n    }\n\n    if (options.closeButton) {\n      var closeButton = $(templates.closeButton);\n\n      if (options.title) {\n        dialog.find(\".modal-header\").prepend(closeButton);\n      } else {\n        closeButton.css(\"margin-top\", \"-10px\").prependTo(body);\n      }\n    }\n\n    if (options.title) {\n      dialog.find(\".modal-title\").html(options.title);\n    }\n\n    if (buttonStr.length) {\n      body.after(templates.footer);\n      dialog.find(\".modal-footer\").html(buttonStr);\n    }\n\n\n    /**\n     * Bootstrap event listeners; used handle extra\n     * setup & teardown required after the underlying\n     * modal has performed certain actions\n     */\n\n    dialog.on(\"hidden.bs.modal\", function(e) {\n      // ensure we don't accidentally intercept hidden events triggered\n      // by children of the current dialog. We shouldn't anymore now BS\n      // namespaces its events; but still worth doing\n      if (e.target === this) {\n        dialog.remove();\n      }\n    });\n\n    /*\n    dialog.on(\"show.bs.modal\", function() {\n      // sadly this doesn't work; show is called *just* before\n      // the backdrop is added so we'd need a setTimeout hack or\n      // otherwise... leaving in as would be nice\n      if (options.backdrop) {\n        dialog.next(\".modal-backdrop\").addClass(\"bootbox-backdrop\");\n      }\n    });\n    */\n\n    dialog.on(\"shown.bs.modal\", function() {\n      dialog.find(\".btn-primary:first\").focus();\n    });\n\n    /**\n     * Bootbox event listeners; experimental and may not last\n     * just an attempt to decouple some behaviours from their\n     * respective triggers\n     */\n\n    dialog.on(\"escape.close.bb\", function(e) {\n      if (callbacks.onEscape) {\n        processCallback(e, dialog, callbacks.onEscape);\n      }\n    });\n\n    /**\n     * Standard jQuery event listeners; used to handle user\n     * interaction with our dialog\n     */\n\n    dialog.on(\"click\", \".modal-footer button\", function(e) {\n      var callbackKey = $(this).data(\"bb-handler\");\n\n      processCallback(e, dialog, callbacks[callbackKey]);\n\n    });\n\n    dialog.on(\"click\", \".bootbox-close-button\", function(e) {\n      // onEscape might be falsy but that's fine; the fact is\n      // if the user has managed to click the close button we\n      // have to close the dialog, callback or not\n      processCallback(e, dialog, callbacks.onEscape);\n    });\n\n    dialog.on(\"keyup\", function(e) {\n      if (e.which === 27) {\n        dialog.trigger(\"escape.close.bb\");\n      }\n    });\n\n    // the remainder of this method simply deals with adding our\n    // dialogent to the DOM, augmenting it with Bootstrap's modal\n    // functionality and then giving the resulting object back\n    // to our caller\n\n    appendTo.append(dialog);\n\n    dialog.modal({\n      backdrop: options.backdrop,\n      keyboard: false,\n      show: false\n    });\n\n    if (options.show) {\n      dialog.modal(\"show\");\n    }\n\n    // @TODO should we return the raw element here or should\n    // we wrap it in an object on which we can expose some neater\n    // methods, e.g. var d = bootbox.alert(); d.hide(); instead\n    // of d.modal(\"hide\");\n\n   /*\n    function BBDialog(elem) {\n      this.elem = elem;\n    }\n\n    BBDialog.prototype = {\n      hide: function() {\n        return this.elem.modal(\"hide\");\n      },\n      show: function() {\n        return this.elem.modal(\"show\");\n      }\n    };\n    */\n\n    return dialog;\n\n  };\n\n  exports.setDefaults = function(values) {\n    $.extend(defaults, values);\n  };\n\n  exports.hideAll = function() {\n    $(\".bootbox\").modal(\"hide\");\n  };\n\n\n  /**\n   * standard locales. Please add more according to ISO 639-1 standard. Multiple language variants are\n   * unlikely to be required. If this gets too large it can be split out into separate JS files.\n   */\n  var locales = {\n    br : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancelar\",\n      CONFIRM : \"Sim\"\n    },\n    da : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuller\",\n      CONFIRM : \"Accepter\"\n    },\n    de : {\n      OK      : \"OK\",\n      CANCEL  : \"Abbrechen\",\n      CONFIRM : \"Akzeptieren\"\n    },\n    en : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancel\",\n      CONFIRM : \"OK\"\n    },\n    es : {\n      OK      : \"OK\",\n      CANCEL  : \"Cancelar\",\n      CONFIRM : \"Aceptar\"\n    },\n    fi : {\n      OK      : \"OK\",\n      CANCEL  : \"Peruuta\",\n      CONFIRM : \"OK\"\n    },\n    fr : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuler\",\n      CONFIRM : \"D'accord\"\n    },\n    it : {\n      OK      : \"OK\",\n      CANCEL  : \"Annulla\",\n      CONFIRM : \"Conferma\"\n    },\n    nl : {\n      OK      : \"OK\",\n      CANCEL  : \"Annuleren\",\n      CONFIRM : \"Accepteren\"\n    },\n    pl : {\n      OK      : \"OK\",\n      CANCEL  : \"Anuluj\",\n      CONFIRM : \"Potwierdź\"\n    },\n    ru : {\n      OK      : \"OK\",\n      CANCEL  : \"Отмена\",\n      CONFIRM : \"Применить\"\n    },\n    zh_CN : {\n      OK      : \"OK\",\n      CANCEL  : \"取消\",\n      CONFIRM : \"确认\"\n    },\n    zh_TW : {\n      OK      : \"OK\",\n      CANCEL  : \"取消\",\n      CONFIRM : \"確認\"\n    }\n  };\n\n  exports.init = function(_$) {\n    window.bootbox = init(_$ || $);\n  };\n\n  return exports;\n\n}(window.jQuery));\n"]}